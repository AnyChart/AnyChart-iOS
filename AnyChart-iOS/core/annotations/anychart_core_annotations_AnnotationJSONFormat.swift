// typedef
extension anychart.core.annotations {
    public class AnnotationJSONFormat: JsObject {

        
    public init(allowEdit: Bool, anchor: anychart.enums.Anchor, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: anychart.enums.MarkerType, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: String, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, (anchor != nil) ? anchor.getJsBase() : "null", (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", (markerType != nil) ? markerType.getJsBase() : "null", offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", JsObject.wrapQuotes(value: type), valueAnchor, xAnchor))
    }
    public init(allowEdit: Bool, anchor: anychart.enums.Anchor, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: anychart.enums.MarkerType, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: anychart.enums.AnnotationTypes, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, (anchor != nil) ? anchor.getJsBase() : "null", (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", (markerType != nil) ? markerType.getJsBase() : "null", offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", (type != nil) ? type.getJsBase() : "null", valueAnchor, xAnchor))
    }
    public init(allowEdit: Bool, anchor: anychart.enums.Anchor, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: String, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: String, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, (anchor != nil) ? anchor.getJsBase() : "null", (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", JsObject.wrapQuotes(value: markerType), offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", JsObject.wrapQuotes(value: type), valueAnchor, xAnchor))
    }
    public init(allowEdit: Bool, anchor: anychart.enums.Anchor, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: String, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: anychart.enums.AnnotationTypes, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, (anchor != nil) ? anchor.getJsBase() : "null", (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", JsObject.wrapQuotes(value: markerType), offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", (type != nil) ? type.getJsBase() : "null", valueAnchor, xAnchor))
    }
    public init(allowEdit: Bool, anchor: String, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: anychart.enums.MarkerType, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: String, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, JsObject.wrapQuotes(value: anchor), (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", (markerType != nil) ? markerType.getJsBase() : "null", offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", JsObject.wrapQuotes(value: type), valueAnchor, xAnchor))
    }
    public init(allowEdit: Bool, anchor: String, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: anychart.enums.MarkerType, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: anychart.enums.AnnotationTypes, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, JsObject.wrapQuotes(value: anchor), (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", (markerType != nil) ? markerType.getJsBase() : "null", offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", (type != nil) ? type.getJsBase() : "null", valueAnchor, xAnchor))
    }
    public init(allowEdit: Bool, anchor: String, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: String, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: String, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, JsObject.wrapQuotes(value: anchor), (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", JsObject.wrapQuotes(value: markerType), offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", JsObject.wrapQuotes(value: type), valueAnchor, xAnchor))
    }
    public init(allowEdit: Bool, anchor: String, color: anychart.graphics.vector.AnyColor, fill: anychart.graphics.vector.Fill, grid: anychart.graphics.vector.Stroke, hatchFill: anychart.graphics.vector.PatternFill, hoverGap: Double, hovered: anychart.core.StateSettings, markerType: String, offsetX: Double, offsetY: Double, secondValueAnchor: Double, secondXAnchor: Double, selected: anychart.core.StateSettings, size: Double, stroke: anychart.graphics.vector.Stroke, thirdValueAnchor: Double, thirdXAnchor: Double, trend: anychart.graphics.vector.Stroke, type: anychart.enums.AnnotationTypes, valueAnchor: Double, xAnchor: Double) {
        js.append(String(format: "{allowEdit:%s, anchor: %s, color: %s, fill: %s, grid: %s, hatchFill: %s, hoverGap: %s, hovered: %s, markerType: %s, offsetX: %s, offsetY: %s, secondValueAnchor: %s, secondXAnchor: %s, selected: %s, size: %s, stroke: %s, thirdValueAnchor: %s, thirdXAnchor: %s, trend: %s, type: %s, valueAnchor: %s, xAnchor: %s, } ", allowEdit, JsObject.wrapQuotes(value: anchor), (color != nil) ? color.getJsBase() : "null", (fill != nil) ? fill.getJsBase() : "null", (grid != nil) ? grid.getJsBase() : "null", (hatchFill != nil) ? hatchFill.getJsBase() : "null", hoverGap, (hovered != nil) ? hovered.getJsBase() : "null", JsObject.wrapQuotes(value: markerType), offsetX, offsetY, secondValueAnchor, secondXAnchor, (selected != nil) ? selected.getJsBase() : "null", size, (stroke != nil) ? stroke.getJsBase() : "null", thirdValueAnchor, thirdXAnchor, (trend != nil) ? trend.getJsBase() : "null", (type != nil) ? type.getJsBase() : "null", valueAnchor, xAnchor))
    }

        public func getJsBase() -> String {
            return js
        }

    }
}